document.addEventListener('DOMContentLoaded', function() {

    const contacts = document.querySelectorAll('.contact');
    // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    const currentUser = {
        name: 'You',
        avatar: 'avatar.png' // –ü—É—Ç—å –∫ –≤–∞—à–µ–π –∞–≤–∞—Ç–∞—Ä–∫–µ
    };

    contacts.forEach(contact => {
        contact.addEventListener('click', function() {
            contacts.forEach(c => c.classList.remove('active'));

            this.classList.add('active'); 
            
            //üîπ this ‚Äî —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª–∏, —Ç.–µ. –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π .contact, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —â—ë–ª–∫–Ω—É–ª.
            //üîπ classList.add('active') ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç CSS-–∫–ª–∞—Å—Å active –∫ —ç—Ç–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.

            const contactName = this.querySelector('.contact-info h3').textContent;
            const contactImg = this.querySelector('.contact-avatar img').src;
            const isOnline = this.querySelector('.contact-status.online') !== null;

            document.querySelector('.current-contact .contact-info h3').textContent = contactName;
            document.querySelector('.current-contact .contact-info p').textContent = isOnline ? 'Online': 'Offline';
            document.querySelector('.current-contact .contact-avatar img').src = contactImg;

            loadChatHistory(contactName);
        })
    });

    function loadChatHistory(contactName) {
        const messages = document.querySelector('.messages');
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        messages.innerHTML = '';

        // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –±—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
            // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏
            const contactImg = document.querySelector('.current-contact .contact-avatar img').src;
            
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            receiveMessage("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", contactImg, contactName);
            
            setTimeout(() => {
                receiveMessage("–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", contactImg, contactName);
            }, 1000);
        }, 500);
    }

    const messageForm = document.querySelector('.message-input');
    const messageInput = document.querySelector('.chat-input');

    messageForm.addEventListener('click', function(e) {
        if (e.target.classList.contains('send-button') || e.target.closest('.send-button')) {
            e.preventDefault();
            const message = messageInput.value.trim();

            if(message) {
                sendMessage(message);
                messageInput.value = '';
            }
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é Enter
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            const message = messageInput.value.trim();
            
            if(message) {
                sendMessage(message);
                messageInput.value = '';
            }
        }
    });

    function sendMessage(message) {
        const messages = document.querySelector('.messages');
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', 'outgoing');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messageElement.innerHTML = `
            <div class="message-bubble">
                <p>${message}</p>
                <span class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
            </div>
            <div class="message-avatar">
                <img src="${currentUser.avatar}" alt="${currentUser.name}">
            </div>
        `;
        
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        simulateReply();
    }
    
    function receiveMessage(message, senderAvatar, senderName) {
        const messages = document.querySelector('.messages');
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', 'incoming');
        
        messageElement.innerHTML = `
            <div class="message-avatar">
                <img src="${senderAvatar}" alt="${senderName}">
            </div>
            <div class="message-bubble">
                <p>${message}</p>
                <span class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
            </div>
        `;
        
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    function simulateReply() {
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ—Ç "–ø–µ—á–∞—Ç–∞–Ω–∏–µ" —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        const delay = Math.random() * 2000 + 1000;
        
        setTimeout(() => {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
            const contactName = document.querySelector('.current-contact .contact-info h3').textContent;
            const contactImg = document.querySelector('.current-contact .contact-avatar img').src;
            
            // –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const replies = [
                "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...",
                "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω",
                "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–∑–∂–µ",
                "–û—Ç–ª–∏—á–Ω–æ!",
                "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω–∏–º–∞—é",
                "–•–º–º–º, –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å"
            ];
            
            const randomReply = replies[Math.floor(Math.random() * replies.length)];
            receiveMessage(randomReply, contactImg, contactName);
        }, delay);
    }

    const searchInput = document.querySelector('.search-contact');
    searchInput.addEventListener('input', function(){
        const searchTerm = this.value.toLowerCase();

        contacts.forEach(contact => {
            const contactName = contact.querySelector('.contact-info h3').textContent.toLocaleLowerCase();
            if(contactName.includes(searchTerm)){
                contact.style.display = 'flex';
            } else {
                contact.style.display = 'none'
            }
        });
    });
});



